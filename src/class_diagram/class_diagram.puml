@startuml

class LoginManager{
    + {static} authetnicate(login: string, password: string): User
    + {static} logout(user: User): bool
    + {static} isLoggedin(user: User): bool
}

entity Address {
  - country: string
  - city: string
  - postalCode: string
  - street: string
  - houseNumber :string
  --
  // getters and setter
}

entity Message{
    - id: unsigned int
    - content: string
    - from: User
    - timestamp: unsigned int
    - title: string
    - to: User
    --
    // getters and setters
}


class User {
  - id : unsigned int
  - login : string
  - password : string
  - firstName : string
  - lastName: string
  - email: string
  - phoneNumber: string
  --
  // getters and setter
  + sendMessage(message: Message) : bool
  + getSentMessages() : List<Message>
  + getRecivedMessages() : List<Message> 

}

class Membership {
  - validUntil: unsigned int
  - chargePrice: float
  + extend(days: unsigned int)
  + isValid(): bool
}

class Gym {
  - name: string
  - identifier: string
  - isAvailable: bool
  - maxParticipants: int
  + lock() : void
  + open() : void
  --
  // getters and setter
}

class TrainingSession {
  - description
  - startDate
  - duration
  - skillLevel : SkillLevel
  - attendants : List<Client>
  - isCancelled : bool
  - trainer: Trainer
  --
  // getters and setter
    + {static} getFinishedTrainingSessions(): List<TrainingSession>
    + {static} getUpcomingTrainingSessions(): List<TrainingSession>
    + {static} save(trainingSession: TrainingSession) : bool
}

class Trainer{
  - Expertise: TrainerExpertise
  + createTrainingSessison(trainingSession: TrainingSession): bool
  + editTrainingSession(TrainingSession)
  + doClientFeedback(client: Client): ClientProgress
  
}

class ClientProgress{
  - feedback: string
  - client: Client
  - suggestedTrainingSkillLevel: SkillLevel
  - feedbackGiver: Trainer
  + createProgressRaport(): string
}

ClientProgress -.> Trainer 
ClientProgress --> SkillLevel
ClientProgress -.> Client


TrainingSession -.> Trainer
TrainingSession <--* Gym
User -.> Message
LoginManager <.- User


TrainingSession --> SkillLevel

enum SkillLevel{
    GIGACHAD
    ADVANCED
    BEGINNER
    NOOB
}

enum ExerciseDifficulty{
    HARD
    MEDIUM
    EASY
}

entity Exercise{
    name: string
    difficulty: ExerciseDifficulty
}

enum TrainerExpertise{
  FITTNESS
  CROSSFIT
  WEIGHTLIFTING
  YOGA
  MARTIALARTS
}

Trainer --> TrainerExpertise

Exercise --> ExerciseDifficulty

TrainingSession o--> Exercise

class Client {
    - weight: float
    - height: float
    - birthTimeStamp: unsigned int
    + getAvailableTrainingSessions(): List<TrainingSession>
    + getDoneTraininigSessions(): List<TrainingSessions>
    + resignFromTraining(TrainingSession session): bool
    + signUpForTraining(TrainingSumession session): bool
}

class Worker{
  + cancelMembership(client: Client): bool
  + createMembership(client: Client): Membership
  + editUserData(user: User): bool
  + scheduleMaintainance(gym: Gym): void
  + finishMaintainance(gym: Gym): void
}

Worker -.> Client
Worker -.> Gym

class Manager{
  + editWorker(worker: Worker): bool
  + addWorker(worker: Worker): Worker
  + deleteWorker(worker: Worker): bool
  + addGym(gym: Gym): Gym
  + editGym(gym: Gym): bool
  + deleteGym(gym: Gym): bool
}

Client -.> TrainingSession

Membership <--* Client
User -> Address

User <|-- Client
Worker <|-- Manager
User <|-- Trainer
User <|-- Worker

@enduml
