@startuml

interface LoginManager{
    login(User user)
    logout(User user)
    isLoggedin(User user)
}

entity Address {
  - country: string
  - city: string
  - postalCode: string
  - street: string
  - houseNumber :string
  --
  // getters and setter
}

entity Message{
    - id: unsigned int
    - content: string
    - from: User
    - timestamp: unsigned int
    - title: string
    - to: User
    --
    // getters and setters
}

interface MessageRepository{
  + getMessagesTo(userid: id): List<Messages>
  + getMessagesFrom(userid: id): List<Messages>
  + save(message: Message): bool
}

User -.> MessageRepository

class User {
  - id : unsigned int
  - login : string
  - password : string
  - firstName : string
  - lastName: string
  - email: string
  - phoneNumber: string
  --
  // getters and setter
  + sendMessage(message: Message) : bool
  + getSentMessages() : List<Message>
  + getRecivedMessages() : List<Message> 
}

class Membership {
  - validUntil: unsigned int
  - chargePrice: float
  + extend(days: unsigned int)
  + isValid(): bool
}

class Gym {
  - name: string
  - identifier: string
  - isAvailable: bool
  - maxParticipants: int
  + lock() : void
  + open() : void
  --
  // getters and setter
}

class TrainingSession {
  - description
  - startDate
  - duration
  - skillLevel : SkillLevel
  - attendants : List<Client>
  - isCancelled : bool
  - trainer: Trainer
  --
  // getters and setter
}

interface TrainingSessionRepository {
    + getFinishedTrainingSessions(): List<TrainingSession>
    + getUpcomingTrainingSessions(): List<TrainingSession>
    + save(trainingSession: TrainingSession) : bool
}

class Trainer{
  + createTrainingSessison(trainingSession: TrainingSession): bool
  + editTrainingSession(TrainingSession)
}

TrainingSession -.> TrainingSessionRepository

TrainingSession -.> Trainer
TrainingSession <--* Gym

TrainingSession -- SkillLevel

enum SkillLevel{
    GIGACHAD
    ADVANCED
    BEGINNER
    NOOB
}

enum ExerciseDifficulty{
    HARD
    MEDIUM
    EASY
}

entity Exercise{
    name: string
    difficulty: ExerciseDifficulty
}

Exercise -- ExerciseDifficulty

TrainingSession o--> Exercise

class Client {
    - weight: float
    - height: float
    - birthTimeStamp: unsigned int
    + getAvailableTrainingSessions(): List<TrainingSession>
    + getDoneTraininigSessions(): List<TrainingSessions>
    + resignFromTraining(TrainingSession session): bool
    + signUpForTraining(TrainingSession session): bool
}
Client -.> TrainingSessionRepository


Membership <--* Client
User -> Address

User <|-- Client
Worker <|-- Manager
User <|-- Trainer
User <|-- Worker

@enduml
